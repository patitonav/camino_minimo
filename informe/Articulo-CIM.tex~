\documentclass[a4paper]{article}
\usepackage[latin1]{inputenc}
\usepackage[spanish]{babel}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{amsmath}
\usepackage{indentfirst}
\usepackage{graphicx}
\usepackage[nottoc,notlot,notlof]{tocbibind}

%--------------------------------------------------------------
\title{Resolución de camino mínimo con algoritmos genéticos}
\author{Patricio Navarro \and Francisco Cabrera \and Alex Ingberg }
\date{18/06/2015}
%--------------------------------------------------------------
\begin{document}
\maketitle
\begin{abstract}
Se vera como es posible resolver el problema de caminos
mínimos utilizando algoritmos genéticos, donde los cromosomas son los pasos
de la solución. Mostramos resultados experimentales que ponen de manifiesto 
el ámbito de aplicación del método, y proponemos también algunas ideas para
generalizarlo de modo que sea efectivo para una familia más amplia de problemas.
Para ellos se usara el caso particular de un robot que debe recorrer un camino en
un depósito para transportar una carga.

Palabras Clave: Algoritmo, Evolutivo, Genético, Laberinto, Camino Mínimo
\end{abstract}
\tableofcontents
%--------------------------------------------------------------
\section{Introduccion}
Una gran cantidad de problemas importantes de
optimización no pueden ser resueltos usando métodos
exactos, es decir, no es posible encontrar su solución
óptima con esfuerzos computacionales aceptables aunque
se pueda contar con computadores de alta velocidad
operando en paralelo. Un gran problema de la
optimización es el fenómeno llamado explosión
combinatorial, que significa, que cuando crece el número
de variables de decisión del problema, el número de
decisiones factibles y el esfuerzo computacional crecen
en forma exponencial \cite{1}.\par
 Hace algunos años todavía se hablaba de la
dificultad para atacar problemas de tipo NP. Es
decir, problemas cuya solución requería de una
gran cantidad de pruebas y combinaciones, sin
poder obtenerla con una solución analítica
directa. Ejemplo de esto es el problema del
agente viajero \cite{2,3}, cuya solución era intratable
en términos de la computación tradicional.\par
Sin embargo, no todos los
problemas combinatoriales son tan complejos de
resolver; existen algunos para los cuales hay algoritmos
que resuelven esos problemas con un esfuerzo
computacional que crece de manera polinomial con el
tamaño del problema\cite{4,5}.\par

\section{Descripcion del problema}
El problema consiste en un robot que debe transladar una carga desde un punto inicial
hasta un punto final dentro de un depósito, donde existen obstáculos de distinto tipo.
El objetivo es encontrar el mejor camino posible entre la posición de inicio y fin, en un tiempo
de calculo razonable, sin atravezar ningún obstáculo.\par

\subsection{Modelizacion}
Para modelizar las coordenadas sobre el plano, se usara una matriz, donde se discretizarán
las dimenciones en bloques donde cada uno de estos representará
una unidad de medida y una posición en la matriz. El robot solo podra moverse en 4 direcciones (arriba, abajo, derecha e izquierda) y no puede volver  sobre sus pasos (no puede realizar un movimiento hacia la 
derecha seguido inmediatamente de uno a la izquierda).\par

\subsubsection{Representacion del depósito en la matriz}
Se utilizaran numeros enteros en el rango [0,9] para representar el depósito en la matriz.\par
0:     Representa un espacio transitable.\par
(1-6): Representa los distintos obstáculos.\par
7:     Es el punto donde inicia el robot.\par
8:     Es el punto donde debe terminar el robot.\par
9:     Representa los límites del depósito.\par 
Cabe destacar que se introdujo un rango de obstaculos amplio, para poder representar (si asi se desea) con mayor eficacia la problematica de atravezar dicho objeto.\par

\subsection{Consideraciones}
Para este problema no se consideran obstáculos fuera del plano compuesto por la
superficie del galpón. También se despreciará cualquier influciencia de la carga
en el desplazamiento del robot.\par
No se usara unidades de medida en el desplzamiento del robots, solamente se discretizara en los puntos de la matriz.\par

\section{Solución}
Para la resolucion de este problema, se usaran algoritmos geneticos, ya que la velocidad con la que pueden converger a soluciones factibles, seria lo mas adecuado en este problema.
Buscaremos un camino, que una el punto de partida con el punto de fin, sin atravesar ninguno de los obstaculos dispuestos en el plano.\par

Cada solución está compuesta por cromosomas, los cuales se unen para formar el camino por el cual el robot debe transitar, estos cromosomas contienen la posicion dentro de la matriz, tanto como la direccion en la cual se desplza.\par
  
Como en cualquier algoritmo genetico, una vez obtenida la poblacion inicial, comenzara un proceso iterativo de mutacion y cruza entre las soluciones, con el fin de mejorar las mismas.
 Para mejorar las mutaciones en este algoritmo se ha introducido una heuristica, en la cual la solucion a ser mutada es partida en distintos tramos, luego de lo cual se evalua la porción menos apta (con el menor valor de fitness) y se genera una porción nueva (la cual tiene un comienzo y un final ya determinado) atravez del mismo metodo con el cual se ha generado la poblacion inicial.\par 
 
Para realizar las pruebas se configuraran distintos valores para la cantidad de iteraciones totales, asi como para la poblacion inicial( 250, 500, 1000 y 2000).

 Realizamos 100 ejecuciones del programa registrando: tiempos de ejecución total y promedio; cantidad de iteraciones y aptitud promedio, mínima y máxima. La condición de corte para estas ejecuciónes fue llegar a una solución óptima con una aptitud de 10 o a un tope de 1000 generaciones de soluciones.\par

\section{Resultados}
El camino óptimo obtenido tiene un valor de fitness de 10. Además, el tiempo promedio y la cantidad de iteraciones promedio necesarias varía según la población inicial.\par

\begin{figure}[!hbp]
	\begin{center}
		\includegraphics[width=0.975\textwidth]{tabla1.PNG}
	\end{center}
	\caption{Datos obtenidos en 100 ejecuciónes del programa para distintos tamaños de población inicial. Con maximo de 1000 iteraciones} \label{fig001}
\end{figure}

\begin{figure}[!hbp]
	\begin{center}
		\includegraphics[width=0.975\textwidth]{graf-aptitud.PNG}
	\end{center}
	\caption{Valores de aptitud en 100 ejecuciónes para encontrar una solución óptima.} \label{fig003}
\end{figure}

\begin{figure}[!hbp]
	\begin{center}
		\includegraphics[width=0.975\textwidth]{graf-tiempo.PNG}
	\end{center}
	\caption{Tiempo promedio de procesamiento en 100 ejecuciónes del programa para distintos tamaños de población inicial.} \label{fig004}
\end{figure}

\begin{figure}[!hbp]
	\begin{center}
		\includegraphics[width=0.975\textwidth]{graf-iteraciones-relativas.PNG}
	\end{center}
	\caption{Valores normalizados de iteraciones en 100 ejecuciónes para encontrar una solución óptima.} \label{fig005}
\end{figure}

En los gráficos se puede apreciar que la cantidad promedio y necesaria de iteraciones baja según la población inicial. No obstante, la cantidad de tiempo no es monótona y ofrece su óptimo alrededor de una población de 1000 individuos.\par



\section{Conclusiones}

De la Figura 1 se deduce, a partir de sus valores registrados de aptitud e iteraciones máximas, que para un valor de 2000 soluciones iniciales se llegó a la óptima (de una aptitud igual a 10) en todas las 100 corridas del programa. Mientras que para el resto de los valores medidos si bien en la mayoria de los casos se llego a la solucion optima, en otros no lo hizo, llegando en los peores casos a 28 (esto se registro entre 1\% y 3\% de las corridas).\par
Tambien se puede observar que el incremento de la poblacion inicial tiene una gran insidencia sobre la cantidad de iteraciones necesarias para obterner la solucion optima. A medida que duplicamos la poblacion inicial, la cantidad de iteraciones promedio para obtener la solucion optima baja de la siguiente forma: 40, 29, 15, 6. \par 
Como podemos observar, los tiempos de ejecucion no se ven en gran medida afectados por el incremento de la poblacion inicial, como si lo hacen, por el incremento de iteraciones. Esto ultimo nos permite concluir, que tanto las mutaciones como las cruzas son muy costosas a nivel computacional en nuestro algoritmo.

\newpage

\renewcommand\refname{Bibliografía}
\begin{thebibliography}{breitestes Label}
\addcontentsline{toc}{section}{Bibliography}
\bibitem{1} \textsc{Hincapié, R. A.}, \textsc{Porras, C. A. R.} \& \textsc{Gallego, R. A.}
\textit{(2004)Técnicas heurísticas aplicadas al problema del cartero viajante (TSP)}, Scientia et Technica, 1(24).
\bibitem{2} \textsc{Baskaran, G.}, \textsc{Fu, Y.} \& \textsc{Anderson, P. W.}
\textit{The Statistical Mechanics of the Traveling
Salesman Problem}, Journal of Statistical
Physics, núm. 45, pp. 1-25, 1986.
\bibitem{3} \textsc{Kirkpatrick, S.} \& \textsc{ Toulouse, G.}
\textit{Configuration Space Analysis Of Traveling Salesman
Problems}, Journal de Physique, núm. 46,
pp. 1277-1292, 1985.
\bibitem{4} \textsc{Gallego R.},\textsc{Ramón; Romero L.} y \textsc{Escobar Z.,
Antonio.}
\textit{Algoritmos Genéticos}, texto guía en
Maestría en Ingeniería Eléctrica U.T.P.
\bibitem{5} \textsc{Gallego R.},\textsc{ Ramón y Romero L.} , \textsc{Rubén}
\textit{Optimización Combinatorial}, texto guía en Maestría en
Ingeniería Eléctrica U.T.P.
\end{thebibliography}

\appendix

\end{document}
